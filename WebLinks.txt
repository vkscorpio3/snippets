microservice
https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/
https://hackernoon.com/understand-service-discovery-in-microservice-c323e78f47fd
https://medium.com/microservices-in-practice/microservices-in-practice-7a3e85b6624c
http://asset.appdynamics.com/c/getting-started-with?mkt_tok=eyJpIjoiWm1JeE5tUmtOMkV3TVRSaCIsInQiOiJpKys1d0o0SEZmRG9hUlhlQ0g2SzRmZmlRd1VIU1lBeGtuclVEUHIxXC9JTHJ1WWxkN0lWTGJlZXR6OFYwOVJySUdiRHJcL1VRRVhGWVVPTkZ4alI2WnU1U0wrQWV3TGtlYWtoZTdoY2IyS3pvb09HOTVOeExGU2dSTmwxUE5VcjBlIn0%3D&utm_budget=campaigns&utm_campaign=2018-08-01-Ebk-Microservices-Containers-EMEA&utm_content=containers+and+microservices&utm_medium=email&utm_source=appdynamics&utm_term=containers+and+microservices&x=Z1YpSm

https://leetcode.com/problems/add-and-search-word-data-structure-design/description/
http://www.chegg.com/homework-help/questions-and-answers/design-data-structure-keeps-sequence-real-numbers-s-x1-x2-supports-following-operations-o--q24988792
https://www.programcreek.com/2016/08/design-a-data-structure-with-insert-delete-getmostfrequent-of-o1/
https://stackoverflow.com/questions/9141830/explain-the-use-of-a-bit-vector-for-determining-if-all-characters-are-unique
https://stackoverflow.com/questions/9575905/how-to-design-a-data-structure-that-allows-one-to-search-insert-and-delete-an-i
https://www.geeksforgeeks.org/a-data-structure-question/
https://www.google.co.uk/search?q=Design+a+data+structure+that&rlz=1C1GCEA_enGB786GB786&ei=lQfLWqayM9HFwQKatY7wCg&start=20&sa=N&biw=1280&bih=893
https://stackoverflow.com/questions/22918360/java-how-to-remove-element-from-list-efficiently?noredirect=1&lq=1
https://www.cs.tau.ac.il/~shanir/concurrent-data-structures.pdf
https://stackoverflow.com/questions/2043783/how-to-efficiently-performance-remove-many-items-from-list-in-java
https://www.google.co.uk/search?dcr=0&source=hp&ei=8_vKWpH9EomkwAL4-puYAw&q=java+data+structure+for+bulk+deletion+of+items&oq=java+data+structure+for+bulk+deletion+of+items&gs_l=psy-ab.3...5479.18660.0.19669.46.46.0.0.0.0.473.3449.40j2j4-1.43.0....0...1.1.64.psy-ab..3.35.2903...0j0i131k1j0i10k1j0i22i30k1j0i22i10i30k1j33i22i29i30k1j33i160k1j33i21k1.0.wFMR3NYIrl8
http://www.oracle.com/technetwork/articles/java/batch-1965499.html

http://javabeat.net/testing-support-in-spring-framework/
http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/testing.html
http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#testing

http://www.codesenior.com/en/tutorial/Spring-ContextLoaderListener-And-DispatcherServlet-Concepts
https://spring.io/understanding/application-context
http://meta-guide.com/videography/100-best-splunk-videos
http://www.learnsplunk.com/splunk-linux-install-step-by-step.html
https://intellipaat.com/tutorial/splunk-tutorial/installation/
http://tekslate.com/tutorials/splunk
http://tekslate.com/splunk-extract-fields/
http://www.splunk.com/view/SP-CAAAHSM
http://docs.splunk.com/Documentation/Splunk/latest/SearchTutorial/WelcometotheSearchTutorial
https://www.quora.com/What-are-some-of-the-use-cases-of-Apache-Storm
http://www.infoworld.com/article/2854894/application-development/spark-and-storm-for-real-time-computation.html
https://www.infoq.com/articles/apache-kafka

docker
https://rancher.com/the-similarities-and-differences-between-windows-and-linux-containers/
https://docker-curriculum.com/
https://docs.docker.com/get-started/#images-and-containers
https://www.ibm.com/developerworks/cloud/library/cl-getting-started-docker-and-kubernetes/index.html
https://hackernoon.com/docker-tutorial-getting-started-with-python-redis-and-nginx-81a9d740d091
https://html5up.net/massively
https://www.atlassian.com/continuous-delivery/ci-friendly-git-repos
https://pivotal.io/cicd


https://en.wikipedia.org/wiki/Application_security
http://people.scs.carleton.ca/~paulv/papers/softprot8a.pdf
https://seroter.wordpress.com/2016/05/16/modern-open-source-messaging-apache-kafka-rabbitmq-and-nats-in-action/


http://www.wmrichards.com/amqp.pdf
https://content.pivotal.io/blog/understanding-when-to-use-rabbitmq-or-apache-kafka

https://www.ibm.com/developerworks/java/tutorials/j-jms/j-jms-updated.html
https://www.accenture.com/us-en/blogs/blogs-jon-holt-cloud-aws-step-functions

http://derpturkey.com/aws-step-functions-with-serverless/


https://serverless.com/framework/docs/providers/aws/guide/resources/
https://serverless.com/framework/docs/providers/aws/guide/deploying/
https://stackoverflow.com/questions/46861678/serverless-framework-ways-to-achieve-full-infrastructure-as-code


https://serverless.com/learn/


https://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/java-memory-model.html
https://wiki.sei.cmu.edu/confluence/display/java/VNA00-J.+Ensure+visibility+when+accessing+shared+primitive+variables
https://medium.com/google-developer-experts/on-properly-using-volatile-and-synchronized-702fc05faac2

https://goibibo.github.io/2016/03/01/real-time-distributed-system.html


https://arviarya.wordpress.com/2013/02/15/apache-dbcp-connection-pool-revisited/
https://curl.haxx.se/docs/sslcerts.html
https://dzone.com/articles/how-analyze-java-thread-dumps
https://dzone.com/articles/difference-between-blocked-waiting-timed-waiting-e
https://stackoverflow.com/questions/22577197/java-8-streams-collect-vs-reduce/38513507#38513507
https://www.concretepage.com/forum/thread?qid=481

https://docops.ca.com/ca-workload-automation-ixp/11-3-5/en/administrating/assign-privileges-to-users-and-groups
https://serverless-stack.com/
https://aws.amazon.com/blogs/mobile/react-serverless-starter-application-with-one-click-aws-deployment-and-hosting/
http://endran.nl/blog/mockito-vs-jmockit/
https://stackoverflow.com/questions/4105592/comparison-between-mockito-vs-jmockit-why-is-mockito-voted-better-than-jmockit
http://dontpanic.42.nl/2013/04/mockito-powermock-vs-jmockit.html



http://javabeat.net/testing-support-in-spring-framework/
http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/testing.html
http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#testing


http://www.codesenior.com/en/tutorial/Spring-ContextLoaderListener-And-DispatcherServlet-Concepts
https://spring.io/understanding/application-context
http://meta-guide.com/videography/100-best-splunk-videos
http://www.learnsplunk.com/splunk-linux-install-step-by-step.html
https://intellipaat.com/tutorial/splunk-tutorial/installation/
http://tekslate.com/tutorials/splunk
http://tekslate.com/splunk-extract-fields/
http://www.splunk.com/view/SP-CAAAHSM
http://docs.splunk.com/Documentation/Splunk/latest/SearchTutorial/WelcometotheSearchTutorial
https://www.quora.com/What-are-some-of-the-use-cases-of-Apache-Storm
http://www.infoworld.com/article/2854894/application-development/spark-and-storm-for-real-time-computation.html
https://www.infoq.com/articles/apache-kafka


http://www.drdobbs.com/architecture-and-design/refactoring-deeply-nested-code/231500074?pgno=2
http://programmers.stackexchange.com/questions/47789/how-would-you-refactor-nested-if-statements
http://programmers.stackexchange.com/questions/206816/clarification-of-avoid-if-else-advice
https://www.quora.com/Is-there-any-alternative-to-writing-multiple-else-if-statements
https://dzone.com/refcardz/design-patterns
https://dzone.com/articles/design-patterns-state

https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6
https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207
https://hacks.mozilla.org/2017/06/avoiding-race-conditions-in-sharedarraybuffers-with-atomics/

https://confluence.dts.fm.rbsgrp.net/display/RISKMODELS/Cradle+Batch


design patterns
http://www.programmr.com/index.php?q=DesignPatterns


unit testing
http://www.oracle.com/technetwork/articles/adf/part5-083468.html
http://www.codeaffine.com/2014/08/18/junit-in-a-nutshell-test-structure/
http://www.codeaffine.com/2012/09/24/junit-rules/
http://stackoverflow.com/questions/31360750/java-what-are-the-basic-most-essential-junit-test

good sites
https://buffer.com/



security
http://docs.oracle.com/cd/E17904_01/web.1111/b32511/intro_security.htm#WSSEC2343


Blog topics
1. custom impl. of FastStartupContextLoaderForTesting
2. use of @Value annotation
3. 

https://www.edx.org/course/data-structures-software-design-pennx-sd2x

https://developers.google.com/web/
https://codelabs.developers.google.com/
https://www.html5rocks.com/en/tutorials/webrtc/basics/
https://www.html5rocks.com/en/tutorials/webrtc/basics/#toc-history


http://blog.techstacks.com/2009/03/dynamically-updating-log-levels-in-jboss.html

https://www.quora.com/What-side-business-can-make-you-1000-2000-a-week
http://www.forbes.com/forbes/welcome/#1065156450fb
https://dzone.com/articles/groovy-dsl-simple-example
https://www.quora.com/unanswered/I-am-31-years-old-investing-INR-110k-a-month-in-various-SIPs-in-India-since-July-2015-How-can-I-make-10-Crores-when-I-am-40-year-old
http://www.textfiles.com/humor/COMPUTER/1-liners.txt
http://www.baeldung.com/2011/12/22/the-persistence-layer-with-spring-data-jpa/
http://www.petrikainulainen.net/spring-data-jpa-tutorial/
http://docs.spring.io/platform/docs/1.1.2.RELEASE/reference/htmlsingle/
http://brettwooldridge.github.io/HikariCP/
http://www.javaworld.com/article/2078898/open-source-tools/open-source-tools-open-source-java-projects-spring-data.html
https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole
http://www.infoq.com/articles/spring-data-intro
http://www.springbyexample.org/examples/spring-data-jpa-jpa-config.html
http://nand2tetris.org/

http://www.codeproject.com/Articles/39166/Using-the-Chain-Of-Command-Design-Pattern-Concepts
http://www.javaworld.com/article/2077569/core-java/java-tip-68--learn-how-to-implement-the-command-pattern-in-java.html

http://www.onjava.com/pub/a/onjava/2005/08/31/eclipse-jboss-remote-debug.html?page=6
https://confluence.sakaiproject.org/display/BOOT/Debugging+Tomcat+Remotely+Using+Eclipse

http://www.foxtrot.com/
http://www.laliluna.de/jpa-hibernate-guide/ch01.html
http://www.codeproject.com/Articles/114262/ways-of-doing-locking-in-NET-Pessimistic-and-opt#What%20is%20Optimistic%20locking
http://www.javacodegeeks.com/2012/11/jpahibernate-version-based-optimistic-concurrency-control.html

Reliance Tax Saver (ELSS) Fund (G)
ICICI Pru Tax Plan-Reg (G)
Franklin India Taxshield (G)
Canara Rob Equity Tax Saver Fund-Reg (G)
https://en.wikipedia.org/wiki/Microservices
http://stackoverflow.com/questions/5898243/some-basic-oracle-concepts

http://gel.fm.rbsgrp.net/GEL/forms/IRTasks.aspx

http://spring.io/blog/2013/07/11/eclipse-quick-search/
http://stackoverflow.com/questions/3004171/how-to-display-databases-in-oracle-11g-using-sqlplus
http://www.docsity.com/en/Data_structures_and_algorithms/561855/



http://www.codesenior.com/en/tutorial/Spring-ContextLoaderListener-And-DispatcherServlet-Concepts
https://spring.io/understanding/application-context
http://meta-guide.com/videography/100-best-splunk-videos
http://www.learnsplunk.com/splunk-linux-install-step-by-step.html
https://intellipaat.com/tutorial/splunk-tutorial/installation/
http://tekslate.com/tutorials/splunk
http://tekslate.com/splunk-extract-fields/
http://www.splunk.com/view/SP-CAAAHSM
http://docs.splunk.com/Documentation/Splunk/latest/SearchTutorial/WelcometotheSearchTutorial
https://www.quora.com/What-are-some-of-the-use-cases-of-Apache-Storm
http://www.infoworld.com/article/2854894/application-development/spark-and-storm-for-real-time-computation.html
https://www.infoq.com/articles/apache-kafka


https://zeroturnaround.com/rebellabs/profiling-restful-services-with-xrebel/
Builder Vs. Factory Vs. Decorator

1) Factory can be used to create different implementation of same interface but Builder is tied up with its Container class and only returns object of Outer class.

2)  Decorator Pattern is used to add or remove additional functionalities or responsibilities from the object dynamically without impacting the original object. There is no restriction of freezing the object until all its features are added

3) The builder exposes the attributes the generated object should have, but hides how to set them.

4) Patterns like builder and factory(and abstract factory) are used in creation of objects. And the patterns like decorator (also called as structural design patterns) are used for extensibility or to provide structural changes to already created objects.

5) If we do not want to expose the attributes and want the creation of a certain pizza “magically” inside based on some attributes, factory Pattern could be used.


http://www.developer.com/java/data/exploring-the-queue-interface-in-java.html
https://confluence.dts.fm.rbsgrp.net/display/BLDCLDDDOC/DTS+TeamCity+On-boarding
http://www.developer.com/java/data/java-nio.2-file-handling.html
http://www.developer.com/java/data/understanding-java-nested-classes-and-java-inner-classes.html
https://anirudhbhatnagar.com/category/design-patterns/

-- Design Pattern tutorials --
https://anirudhbhatnagar.com/2014/08/19/pizza-problem-builder-vs-decorator/
--- Blogs ---
http://p--np.blogspot.in/
https://en.wikipedia.org/wiki/Magic_formula_investing


--- Gradle ---
http://www.drdobbs.com/jvm/why-build-your-java-projects-with-gradle/240168608?pgno=3


--- Quora ---
http://www-igm.univ-mlv.fr/~lecroq/string/examples/exp14.html


--- Boyer-Moore ---
http://www-igm.univ-mlv.fr/~lecroq/string/examples/exp14.html

--- Equal and Hashcode ---
http://javarevisited.blogspot.in/2013/08/10-equals-and-hashcode-interview.html
http://eclipsesource.com/blogs/2012/09/04/the-3-things-you-should-know-about-hashcode/
http://stackoverflow.com/questions/16400711/two-unequal-objects-with-same-hashcode

---- Hibernate ----
open session in view (OSIV) pattern
locks in hibernate
http://www.laliluna.de/jpa-hibernate-guide/ch01.html
http://www.codeproject.com/Articles/114262/ways-of-doing-locking-in-NET-Pessimistic-and-opt#What%20is%20Optimistic%20locking
http://www.javacodegeeks.com/2012/11/jpahibernate-version-based-optimistic-concurrency-control.html

--- Design Patterns ---
http://www.codeproject.com/Articles/39166/Using-the-Chain-Of-Command-Design-Pattern-Concepts
http://www.javaworld.com/article/2077569/core-java/java-tip-68--learn-how-to-implement-the-command-pattern-in-java.html


----- Mocking ----
http://stackoverflow.com/questions/8517940/mocking-internal-instantiated-object
http://stackoverflow.com/questions/7440946/how-to-write-a-ut-to-mock-an-internal-object-in-one-method
http://www.codeproject.com/Articles/516360/Mockito-a-great-mock-framework-for-Java-developmen
--- StackOverflow ---
http://stackoverflow.com/questions/3564139/how-to-override-the-final-equals-method-in-java-enums
http://stackoverflow.com/questions/949678/ant-is-using-wrong-java-version
http://stackoverflow.com/questions/1582161/how-does-a-preparedstatement-avoid-or-prevent-sql-injection
	
--- Wikipedia ---
https://en.wikipedia.org/wiki/Microservices

---- Oracle ----
http://stackoverflow.com/questions/5898243/some-basic-oracle-concepts


---- Remote Debugging ----
http://www.onjava.com/pub/a/onjava/2005/08/31/eclipse-jboss-remote-debug.html?page=6
https://confluence.sakaiproject.org/display/BOOT/Debugging+Tomcat+Remotely+Using+Eclipse

--- Generics ---
That is because, until Java 7, generics do not fully support target typing, so you need to help the compiler a little with what is called a type witness like in ConnectionHelper.<List<ClientCoverageCRU>>.
http://stackoverflow.com/questions/21297979/odd-method-call-in-java-using-a-dot-operator-to-access-a-generic-list
http://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html
http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeParameters.html#FAQ106

https://expertmile.com/arti.php?article_id=1105


https://www.careercup.com/page?pid=system-design-interview-questions
https://www.careercup.com/question?id=5747801813155840
https://www.careercup.com/question?id=5690212731584512


https://javainterviews.scribbleit.in/question-bank/design-metro-smart-card-system-for-delhi-using-java/p/AnPDBA
http://interviewquestionsatsapientforjava.blogspot.in/2015/07/java-interview-questions-at-sapient-for.html
http://bootsnipp.com/
https://vikaspandeyjavatea.wordpress.com/2014/08/04/metro-card-management-system/

http://www.developer.com/java/data/exploring-the-queue-interface-in-java.html
https://confluence.dts.fm.rbsgrp.net/display/BLDCLDDDOC/DTS+TeamCity+On-boarding
http://www.developer.com/java/data/java-nio.2-file-handling.html
http://www.developer.com/java/data/understanding-java-nested-classes-and-java-inner-classes.html
https://anirudhbhatnagar.com/category/design-patterns/

-- Design Pattern tutorials --
https://anirudhbhatnagar.com/2014/08/19/pizza-problem-builder-vs-decorator/



- When there is an obstacle, or when a Java based Web application is running much slower than expected, we need to use thread dumps.

- Thread contention is a status in which one thread is waiting for a lock, held by another thread, to be lifted. Different threads frequently access shared resources on a web application. For example, to record a log, the thread trying to record the log must obtain a lock and access the shared resources.

- Deadlock is a special type of thread contention, in which two or more threads are waiting for the other threads to complete their tasks in order to complete their own tasks.


----- Concurrency In Practice -----

- The synchronization policy defines how an object coordinates access to its state without violating its invariants or post 
conditions. It specifies what combination of immutability, thread confinement, and locking is used to maintain thread 
safety, and which variables are guarded by which locks.


------ TCP -------
Companies are facing an interesting challenge with regard to their wide-area-network (WAN) planning. Three out of four organizations report no growth in budgets, and overall planned budget growth is only 5% to 8%. Budgets are essentially flat. Yet, nearly 50% of organizations project significant increases in bandwidth consumption.




More on TCP optimization

Learn more about WAN bandwidth optimization techniques.

Read this article on tuning TCP.

Download a free book chapter on TCP IP protocol and application performance.

One way companies can address this challenge is to optimize what they already have. A lot of the traffic flowing over networks is still based on TCP/IP. TCP, or Transmission Control Protocol, provides reliable, ordered delivery of packets and is the protocol used by most Web applications, email and file transfers. Unfortunately, TCP has blunt flow-management algorithms: If the network or the receiver can't handle the speed at which the sender is working, as indicated by packet loss, timeouts or an excess of out-of-order packets, the network flow will drop to half that rate. Speeds ramp up again, but more slowly than the first time.

So, performance of TCP applications that generate long packet flows, such as large file transfers, can suffer hugely over WAN connections: The longer transit times on such links mean the sender can remain ignorant of degradations in performance for a longer time, and then react with precipitous slowdowns when it catches up. TCP optimization mitigates these problems, either by helping the network avoid packet drops and out-of-order delivery or by tinkering with the TCP flows directly and adjusting drop-back/ramp-up behaviors.


---

The three tips below help IT managers and engineers optimize TCP:

Tip 1: Stop thinking about bandwidth, get smart about congestion. The problem isn't necessarily about how much data needs to get from Point A to Point B, but rather it's about how quickly all the individual, non-cooperating senders and receivers try to cram their data through. That fast ramp up/fast drop down/slower ramp up/fast drop down behavior makes applications in uncongested networks speedy, but it increases the chance of congestion each time a new sender joins the party. Optimizers that can change ramping behaviors to slow the initial ramp up or decrease the size of the initial drop down can prevent congestion in the first place and allow a more graceful response to the threat of it by preemptively slowing transmissions as new traffic streams begin to ramp up.

Tip 2: Think about network priority. Traffic shaping optimizers aim to ensure that an organization has control over how bandwidth is consumed. Control can be positive, guaranteeing that certain applications, devices or users get bandwidth; or negative, limiting the bandwidth that specific users, devices or applications receive. Using them to optimize TCP traffic requires institutional discussion of what kinds of traffic and which applications and users have priority claims on available resources in times of congestion.

Tip 3: Keep TCP out of the way. Today, an increasing amount of the most important traffic -- video conferencing, VoIP data -- is not using TCP/IP; it's using User Datagram Protocol over IP (UDP/IP) instead. And, unfortunately, UDP doesn't have the flow control mechanisms TCP does, which makes TCP susceptible to robust optimization. UDP senders just send packets and the receiver gets what it gets. Given that real-time communications traffic based on UDP is often considered very high priority by the enterprise, TCP optimizers can help by keeping TCP traffic out of the way of the UDP streams and mitigating further congestion problems for the TCP traffic caused by squeezing it through smaller portions of the available pipes to allow UDP traffic priority. (Optimizers that work at the IP level can do more, of course.)
